// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: schema/mission.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TreeService_GetTree_FullMethodName = "/tree.TreeService/GetTree"
)

// TreeServiceClient is the client API for TreeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TreeServiceClient interface {
	GetTree(ctx context.Context, in *GetTreeRequest, opts ...grpc.CallOption) (*GetTreeResponse, error)
}

type treeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTreeServiceClient(cc grpc.ClientConnInterface) TreeServiceClient {
	return &treeServiceClient{cc}
}

func (c *treeServiceClient) GetTree(ctx context.Context, in *GetTreeRequest, opts ...grpc.CallOption) (*GetTreeResponse, error) {
	out := new(GetTreeResponse)
	err := c.cc.Invoke(ctx, TreeService_GetTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TreeServiceServer is the server API for TreeService service.
// All implementations must embed UnimplementedTreeServiceServer
// for forward compatibility
type TreeServiceServer interface {
	GetTree(context.Context, *GetTreeRequest) (*GetTreeResponse, error)
	mustEmbedUnimplementedTreeServiceServer()
}

// UnimplementedTreeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTreeServiceServer struct {
}

func (UnimplementedTreeServiceServer) GetTree(context.Context, *GetTreeRequest) (*GetTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTree not implemented")
}
func (UnimplementedTreeServiceServer) mustEmbedUnimplementedTreeServiceServer() {}

// UnsafeTreeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TreeServiceServer will
// result in compilation errors.
type UnsafeTreeServiceServer interface {
	mustEmbedUnimplementedTreeServiceServer()
}

func RegisterTreeServiceServer(s grpc.ServiceRegistrar, srv TreeServiceServer) {
	s.RegisterService(&TreeService_ServiceDesc, srv)
}

func _TreeService_GetTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreeServiceServer).GetTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TreeService_GetTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreeServiceServer).GetTree(ctx, req.(*GetTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TreeService_ServiceDesc is the grpc.ServiceDesc for TreeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TreeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tree.TreeService",
	HandlerType: (*TreeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTree",
			Handler:    _TreeService_GetTree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema/mission.proto",
}
