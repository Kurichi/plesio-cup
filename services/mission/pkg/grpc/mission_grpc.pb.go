// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: schema/mission.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MissionService_GetMissions_FullMethodName      = "/mission.MissionService/GetMissions"
	MissionService_ProggressMission_FullMethodName = "/mission.MissionService/ProggressMission"
)

// MissionServiceClient is the client API for MissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MissionServiceClient interface {
	GetMissions(ctx context.Context, in *GetMissionsRequest, opts ...grpc.CallOption) (*GetMissionsResponse, error)
	ProggressMission(ctx context.Context, in *ProgressMissionRequest, opts ...grpc.CallOption) (*ProgressMissionResponse, error)
}

type missionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMissionServiceClient(cc grpc.ClientConnInterface) MissionServiceClient {
	return &missionServiceClient{cc}
}

func (c *missionServiceClient) GetMissions(ctx context.Context, in *GetMissionsRequest, opts ...grpc.CallOption) (*GetMissionsResponse, error) {
	out := new(GetMissionsResponse)
	err := c.cc.Invoke(ctx, MissionService_GetMissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) ProggressMission(ctx context.Context, in *ProgressMissionRequest, opts ...grpc.CallOption) (*ProgressMissionResponse, error) {
	out := new(ProgressMissionResponse)
	err := c.cc.Invoke(ctx, MissionService_ProggressMission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MissionServiceServer is the server API for MissionService service.
// All implementations must embed UnimplementedMissionServiceServer
// for forward compatibility
type MissionServiceServer interface {
	GetMissions(context.Context, *GetMissionsRequest) (*GetMissionsResponse, error)
	ProggressMission(context.Context, *ProgressMissionRequest) (*ProgressMissionResponse, error)
	mustEmbedUnimplementedMissionServiceServer()
}

// UnimplementedMissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMissionServiceServer struct {
}

func (UnimplementedMissionServiceServer) GetMissions(context.Context, *GetMissionsRequest) (*GetMissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissions not implemented")
}
func (UnimplementedMissionServiceServer) ProggressMission(context.Context, *ProgressMissionRequest) (*ProgressMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProggressMission not implemented")
}
func (UnimplementedMissionServiceServer) mustEmbedUnimplementedMissionServiceServer() {}

// UnsafeMissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MissionServiceServer will
// result in compilation errors.
type UnsafeMissionServiceServer interface {
	mustEmbedUnimplementedMissionServiceServer()
}

func RegisterMissionServiceServer(s grpc.ServiceRegistrar, srv MissionServiceServer) {
	s.RegisterService(&MissionService_ServiceDesc, srv)
}

func _MissionService_GetMissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).GetMissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_GetMissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).GetMissions(ctx, req.(*GetMissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_ProggressMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).ProggressMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MissionService_ProggressMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).ProggressMission(ctx, req.(*ProgressMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MissionService_ServiceDesc is the grpc.ServiceDesc for MissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mission.MissionService",
	HandlerType: (*MissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMissions",
			Handler:    _MissionService_GetMissions_Handler,
		},
		{
			MethodName: "ProggressMission",
			Handler:    _MissionService_ProggressMission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema/mission.proto",
}
